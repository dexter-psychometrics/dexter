// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Escore_C
arma::vec Escore_C(const arma::vec& theta, const arma::vec& b, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last);
RcppExport SEXP _dexter_Escore_C(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(Escore_C(theta, b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// theta_mle_sec
arma::vec theta_mle_sec(const arma::vec& b, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last);
RcppExport SEXP _dexter_theta_mle_sec(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_mle_sec(b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// escore_wle
double escore_wle(const double theta, const arma::vec& b, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last, const int nI, const int max_a);
RcppExport SEXP _dexter_escore_wle(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP nISEXP, SEXP max_aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const int >::type nI(nISEXP);
    Rcpp::traits::input_parameter< const int >::type max_a(max_aSEXP);
    rcpp_result_gen = Rcpp::wrap(escore_wle(theta, b, a, first, last, nI, max_a));
    return rcpp_result_gen;
END_RCPP
}
// theta_wle_sec
arma::vec theta_wle_sec(const arma::vec& b, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last);
RcppExport SEXP _dexter_theta_wle_sec(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_wle_sec(b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// theta_EAP_GH_c
Rcpp::List theta_EAP_GH_c(const arma::mat& p_score, const arma::vec& theta, const arma::vec& weights);
RcppExport SEXP _dexter_theta_EAP_GH_c(SEXP p_scoreSEXP, SEXP thetaSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type p_score(p_scoreSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_EAP_GH_c(p_score, theta, weights));
    return rcpp_result_gen;
END_RCPP
}
// IJ_c
void IJ_c(const arma::vec& theta, const arma::vec& b, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last, arma::mat& I, arma::mat& J, arma::vec& logFi);
RcppExport SEXP _dexter_IJ_c(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP ISEXP, SEXP JSEXP, SEXP logFiSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type logFi(logFiSEXP);
    IJ_c(theta, b, a, first, last, I, J, logFi);
    return R_NilValue;
END_RCPP
}
// fast_factor
SEXP fast_factor(SEXP x, bool as_int);
RcppExport SEXP _dexter_fast_factor(SEXP xSEXP, SEXP as_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type as_int(as_intSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_factor(x, as_int));
    return rcpp_result_gen;
END_RCPP
}
// fast_factor_lev
SEXP fast_factor_lev(SEXP x, SEXP levs, bool as_int);
RcppExport SEXP _dexter_fast_factor_lev(SEXP xSEXP, SEXP levsSEXP, SEXP as_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type levs(levsSEXP);
    Rcpp::traits::input_parameter< bool >::type as_int(as_intSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_factor_lev(x, levs, as_int));
    return rcpp_result_gen;
END_RCPP
}
// fill_resp_matrix
void fill_resp_matrix(const IntegerVector& person_id, const IntegerVector& item_id, const IntegerVector& item_score, arma::imat& out);
RcppExport SEXP _dexter_fill_resp_matrix(SEXP person_idSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP outSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type out(outSEXP);
    fill_resp_matrix(person_id, item_id, item_score, out);
    return R_NilValue;
END_RCPP
}
// ds_connected_groups
IntegerVector ds_connected_groups(const IntegerMatrix& a);
RcppExport SEXP _dexter_ds_connected_groups(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(ds_connected_groups(a));
    return rcpp_result_gen;
END_RCPP
}
// make_booklets
List make_booklets(const IntegerVector& person_id, const IntegerVector& item_id, const IntegerVector& item_score, IntegerVector& booklet_id, IntegerVector& booklet_score, const bool merged);
RcppExport SEXP _dexter_make_booklets(SEXP person_idSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP booklet_idSEXP, SEXP booklet_scoreSEXP, SEXP mergedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const bool >::type merged(mergedSEXP);
    rcpp_result_gen = Rcpp::wrap(make_booklets(person_id, item_id, item_score, booklet_id, booklet_score, merged));
    return rcpp_result_gen;
END_RCPP
}
// make_booklets_summed
List make_booklets_summed(IntegerVector& person_id, IntegerVector& booklet_id, IntegerVector& item_id, IntegerVector& item_score, const bool merged);
RcppExport SEXP _dexter_make_booklets_summed(SEXP person_idSEXP, SEXP booklet_idSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP mergedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< const bool >::type merged(mergedSEXP);
    rcpp_result_gen = Rcpp::wrap(make_booklets_summed(person_id, booklet_id, item_id, item_score, merged));
    return rcpp_result_gen;
END_RCPP
}
// make_booklets_summed_matrix
List make_booklets_summed_matrix(const IntegerVector& mtx, const int ncol, const int nrow);
RcppExport SEXP _dexter_make_booklets_summed_matrix(SEXP mtxSEXP, SEXP ncolSEXP, SEXP nrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const int >::type nrow(nrowSEXP);
    rcpp_result_gen = Rcpp::wrap(make_booklets_summed_matrix(mtx, ncol, nrow));
    return rcpp_result_gen;
END_RCPP
}
// make_booklets_matrix
List make_booklets_matrix(const IntegerVector& mtx, const int ncol, const int nrow);
RcppExport SEXP _dexter_make_booklets_matrix(SEXP mtxSEXP, SEXP ncolSEXP, SEXP nrowSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type mtx(mtxSEXP);
    Rcpp::traits::input_parameter< const int >::type ncol(ncolSEXP);
    Rcpp::traits::input_parameter< const int >::type nrow(nrowSEXP);
    rcpp_result_gen = Rcpp::wrap(make_booklets_matrix(mtx, ncol, nrow));
    return rcpp_result_gen;
END_RCPP
}
// mutate_booklet_score
IntegerVector mutate_booklet_score(const IntegerVector& person_id, const IntegerVector& booklet_id, const IntegerVector& item_score);
RcppExport SEXP _dexter_mutate_booklet_score(SEXP person_idSEXP, SEXP booklet_idSEXP, SEXP item_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(mutate_booklet_score(person_id, booklet_id, item_score));
    return rcpp_result_gen;
END_RCPP
}
// summarise_booklet_score
int summarise_booklet_score(IntegerVector& person_id, IntegerVector& booklet_id, IntegerVector& item_id, IntegerVector& item_score);
RcppExport SEXP _dexter_summarise_booklet_score(SEXP person_idSEXP, SEXP booklet_idSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type item_score(item_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(summarise_booklet_score(person_id, booklet_id, item_id, item_score));
    return rcpp_result_gen;
END_RCPP
}
// merge_booklets
DataFrame merge_booklets(IntegerVector& booklet_id, const IntegerVector& person_id, const IntegerVector ds_booklet_id, const int maxb);
RcppExport SEXP _dexter_merge_booklets(SEXP booklet_idSEXP, SEXP person_idSEXP, SEXP ds_booklet_idSEXP, SEXP maxbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type ds_booklet_id(ds_booklet_idSEXP);
    Rcpp::traits::input_parameter< const int >::type maxb(maxbSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_booklets(booklet_id, person_id, ds_booklet_id, maxb));
    return rcpp_result_gen;
END_RCPP
}
// get_design_C
DataFrame get_design_C(const IntegerVector& booklet_id, const IntegerVector& item_id);
RcppExport SEXP _dexter_get_design_C(SEXP booklet_idSEXP, SEXP item_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    rcpp_result_gen = Rcpp::wrap(get_design_C(booklet_id, item_id));
    return rcpp_result_gen;
END_RCPP
}
// polytomize_C
List polytomize_C(IntegerVector& booklet_id, IntegerVector& person_id, IntegerVector& item_prop, IntegerVector& item_score, IntegerVector& booklet_score, const int nlev, const int nb);
RcppExport SEXP _dexter_polytomize_C(SEXP booklet_idSEXP, SEXP person_idSEXP, SEXP item_propSEXP, SEXP item_scoreSEXP, SEXP booklet_scoreSEXP, SEXP nlevSEXP, SEXP nbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type item_prop(item_propSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type nlev(nlevSEXP);
    Rcpp::traits::input_parameter< const int >::type nb(nbSEXP);
    rcpp_result_gen = Rcpp::wrap(polytomize_C(booklet_id, person_id, item_prop, item_score, booklet_score, nlev, nb));
    return rcpp_result_gen;
END_RCPP
}
// is_person_booklet_sorted
bool is_person_booklet_sorted(const IntegerVector& booklet_id, const IntegerVector& person_id, const int ncores);
RcppExport SEXP _dexter_is_person_booklet_sorted(SEXP booklet_idSEXP, SEXP person_idSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type person_id(person_idSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(is_person_booklet_sorted(booklet_id, person_id, ncores));
    return rcpp_result_gen;
END_RCPP
}
// parms_is_superset_matrix
bool parms_is_superset_matrix(const IntegerMatrix& x, const IntegerVector& item_id, const IntegerVector& item_score, const int maxs, const int ncores);
RcppExport SEXP _dexter_parms_is_superset_matrix(SEXP xSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP maxsSEXP, SEXP ncoresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type maxs(maxsSEXP);
    Rcpp::traits::input_parameter< const int >::type ncores(ncoresSEXP);
    rcpp_result_gen = Rcpp::wrap(parms_is_superset_matrix(x, item_id, item_score, maxs, ncores));
    return rcpp_result_gen;
END_RCPP
}
// suf_stats_nrm
List suf_stats_nrm(const IntegerVector& booklet_id, const IntegerVector& booklet_score, const IntegerVector& item_id, const IntegerVector& item_score, const int nit, const int max_score);
RcppExport SEXP _dexter_suf_stats_nrm(SEXP booklet_idSEXP, SEXP booklet_scoreSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP nitSEXP, SEXP max_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const int >::type max_score(max_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(suf_stats_nrm(booklet_id, booklet_score, item_id, item_score, nit, max_score));
    return rcpp_result_gen;
END_RCPP
}
// suf_stats_im
List suf_stats_im(const IntegerVector& booklet_score, const IntegerVector& item_id, const IntegerVector& item_score, const int nit, const int max_score);
RcppExport SEXP _dexter_suf_stats_im(SEXP booklet_scoreSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP nitSEXP, SEXP max_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const int >::type max_score(max_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(suf_stats_im(booklet_score, item_id, item_score, nit, max_score));
    return rcpp_result_gen;
END_RCPP
}
// score_tab_single
IntegerVector score_tab_single(const IntegerVector& scores, const int max_score);
RcppExport SEXP _dexter_score_tab_single(SEXP scoresSEXP, SEXP max_scoreSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type scores(scoresSEXP);
    Rcpp::traits::input_parameter< const int >::type max_score(max_scoreSEXP);
    rcpp_result_gen = Rcpp::wrap(score_tab_single(scores, max_score));
    return rcpp_result_gen;
END_RCPP
}
// tia_C
DataFrame tia_C(const IntegerVector& booklet_id, const IntegerVector& booklet_score, const IntegerVector& item_id, const IntegerVector& item_score, const int nb, const int nit, const IntegerVector& frst_item, const IntegerVector& ds_booklet_id, const IntegerVector& ds_item_id);
RcppExport SEXP _dexter_tia_C(SEXP booklet_idSEXP, SEXP booklet_scoreSEXP, SEXP item_idSEXP, SEXP item_scoreSEXP, SEXP nbSEXP, SEXP nitSEXP, SEXP frst_itemSEXP, SEXP ds_booklet_idSEXP, SEXP ds_item_idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_id(item_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type item_score(item_scoreSEXP);
    Rcpp::traits::input_parameter< const int >::type nb(nbSEXP);
    Rcpp::traits::input_parameter< const int >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type frst_item(frst_itemSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ds_booklet_id(ds_booklet_idSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type ds_item_id(ds_item_idSEXP);
    rcpp_result_gen = Rcpp::wrap(tia_C(booklet_id, booklet_score, item_id, item_score, nb, nit, frst_item, ds_booklet_id, ds_item_id));
    return rcpp_result_gen;
END_RCPP
}
// elsymC
arma::vec elsymC(const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, const int omit_item);
RcppExport SEXP _dexter_elsymC(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP omit_itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const int >::type omit_item(omit_itemSEXP);
    rcpp_result_gen = Rcpp::wrap(elsymC(b, a, first, last, omit_item));
    return rcpp_result_gen;
END_RCPP
}
// list_elsymiC
Rcpp::List list_elsymiC(const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last);
RcppExport SEXP _dexter_list_elsymiC(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(list_elsymiC(b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// possible_scores_C
arma::ivec possible_scores_C(const arma::ivec& a, const arma::ivec& first, const arma::ivec& last);
RcppExport SEXP _dexter_possible_scores_C(SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(possible_scores_C(a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// ittotmatC
arma::mat ittotmatC(const arma::vec& b, const arma::ivec& a, const arma::vec& c, arma::ivec& first, arma::ivec& last, const arma::ivec& ps);
RcppExport SEXP _dexter_ittotmatC(SEXP bSEXP, SEXP aSEXP, SEXP cSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP psSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type ps(psSEXP);
    rcpp_result_gen = Rcpp::wrap(ittotmatC(b, a, c, first, last, ps));
    return rcpp_result_gen;
END_RCPP
}
// sstable_nrmC
arma::mat sstable_nrmC(const arma::ivec& a, const arma::vec& b, arma::ivec& firstA, arma::ivec& lastA, arma::ivec& firstB, arma::ivec& lastB);
RcppExport SEXP _dexter_sstable_nrmC(SEXP aSEXP, SEXP bSEXP, SEXP firstASEXP, SEXP lastASEXP, SEXP firstBSEXP, SEXP lastBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type firstA(firstASEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastA(lastASEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type firstB(firstBSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastB(lastBSEXP);
    rcpp_result_gen = Rcpp::wrap(sstable_nrmC(a, b, firstA, lastA, firstB, lastB));
    return rcpp_result_gen;
END_RCPP
}
// sstable_imC
arma::mat sstable_imC(const arma::ivec& a, const arma::vec& b, const arma::vec& c, arma::ivec& firstA, arma::ivec& lastA, arma::ivec& firstB, arma::ivec& lastB);
RcppExport SEXP _dexter_sstable_imC(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP firstASEXP, SEXP lastASEXP, SEXP firstBSEXP, SEXP lastBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type c(cSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type firstA(firstASEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastA(lastASEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type firstB(firstBSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastB(lastBSEXP);
    rcpp_result_gen = Rcpp::wrap(sstable_imC(a, b, c, firstA, lastA, firstB, lastB));
    return rcpp_result_gen;
END_RCPP
}
// elsym_binomC
arma::vec elsym_binomC(const arma::mat& lbinom, const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, const int omit_item);
RcppExport SEXP _dexter_elsym_binomC(SEXP lbinomSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP omit_itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type lbinom(lbinomSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const int >::type omit_item(omit_itemSEXP);
    rcpp_result_gen = Rcpp::wrap(elsym_binomC(lbinom, b, a, first, last, omit_item));
    return rcpp_result_gen;
END_RCPP
}
// list_elsymi_binomC
Rcpp::List list_elsymi_binomC(const arma::mat& lbinom, const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last);
RcppExport SEXP _dexter_list_elsymi_binomC(SEXP lbinomSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type lbinom(lbinomSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(list_elsymi_binomC(lbinom, b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// Expect
arma::vec Expect(const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, arma::ivec& scoretab, const arma::ivec& n_score, const arma::ivec& nit);
RcppExport SEXP _dexter_Expect(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scoretabSEXP, SEXP n_scoreSEXP, SEXP nitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type n_score(n_scoreSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nit(nitSEXP);
    rcpp_result_gen = Rcpp::wrap(Expect(b, a, first, last, scoretab, n_score, nit));
    return rcpp_result_gen;
END_RCPP
}
// Expect_binom
arma::vec Expect_binom(const arma::mat& lbinom, const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, arma::ivec& scoretab, const arma::ivec& n_score, const arma::ivec& nit);
RcppExport SEXP _dexter_Expect_binom(SEXP lbinomSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scoretabSEXP, SEXP n_scoreSEXP, SEXP nitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type lbinom(lbinomSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type n_score(n_scoreSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nit(nitSEXP);
    rcpp_result_gen = Rcpp::wrap(Expect_binom(lbinom, b, a, first, last, scoretab, n_score, nit));
    return rcpp_result_gen;
END_RCPP
}
// Hess
void Hess(const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, arma::ivec& scoretab, const arma::ivec& n_score, const arma::ivec& nit, const int max_cores, arma::vec& E, arma::mat& H);
RcppExport SEXP _dexter_Hess(SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scoretabSEXP, SEXP n_scoreSEXP, SEXP nitSEXP, SEXP max_coresSEXP, SEXP ESEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type n_score(n_scoreSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const int >::type max_cores(max_coresSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type H(HSEXP);
    Hess(b, a, first, last, scoretab, n_score, nit, max_cores, E, H);
    return R_NilValue;
END_RCPP
}
// Hess_binom
void Hess_binom(const arma::mat& lbinom, const arma::vec& b, const arma::ivec& a, arma::ivec& first, arma::ivec& last, arma::ivec& scoretab, const arma::ivec& n_score, const arma::ivec& nit, const int max_cores, arma::vec& E, arma::mat& H);
RcppExport SEXP _dexter_Hess_binom(SEXP lbinomSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scoretabSEXP, SEXP n_scoreSEXP, SEXP nitSEXP, SEXP max_coresSEXP, SEXP ESEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type lbinom(lbinomSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type scoretab(scoretabSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type n_score(n_scoreSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nit(nitSEXP);
    Rcpp::traits::input_parameter< const int >::type max_cores(max_coresSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type E(ESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type H(HSEXP);
    Hess_binom(lbinom, b, a, first, last, scoretab, n_score, nit, max_cores, E, H);
    return R_NilValue;
END_RCPP
}
// calibrate_Bayes_chains
Rcpp::List calibrate_Bayes_chains(const arma::ivec& a, const arma::ivec& first, const arma::ivec& last, const arma::ivec& ib, const arma::ivec& bi, const arma::ivec& nbi, const arma::ivec& nib, arma::ivec& bfirst, arma::ivec& blast, const arma::ivec& bmax, const arma::ivec& m, const arma::ivec& sufI, const arma::ivec& sufI_zero, const arma::ivec& bkscoretab, const arma::mat& b_start, const arma::ivec& item_fixed, const int warmup, const int step, const int ndraws, const arma::ivec progress_init, const int max_cores, const double prior_eta, const double prior_rho, const double prior_nu);
RcppExport SEXP _dexter_calibrate_Bayes_chains(SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP ibSEXP, SEXP biSEXP, SEXP nbiSEXP, SEXP nibSEXP, SEXP bfirstSEXP, SEXP blastSEXP, SEXP bmaxSEXP, SEXP mSEXP, SEXP sufISEXP, SEXP sufI_zeroSEXP, SEXP bkscoretabSEXP, SEXP b_startSEXP, SEXP item_fixedSEXP, SEXP warmupSEXP, SEXP stepSEXP, SEXP ndrawsSEXP, SEXP progress_initSEXP, SEXP max_coresSEXP, SEXP prior_etaSEXP, SEXP prior_rhoSEXP, SEXP prior_nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type ib(ibSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bi(biSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nbi(nbiSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type nib(nibSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type bfirst(bfirstSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type blast(blastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bmax(bmaxSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type sufI(sufISEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type sufI_zero(sufI_zeroSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bkscoretab(bkscoretabSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b_start(b_startSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type item_fixed(item_fixedSEXP);
    Rcpp::traits::input_parameter< const int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< const int >::type step(stepSEXP);
    Rcpp::traits::input_parameter< const int >::type ndraws(ndrawsSEXP);
    Rcpp::traits::input_parameter< const arma::ivec >::type progress_init(progress_initSEXP);
    Rcpp::traits::input_parameter< const int >::type max_cores(max_coresSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_eta(prior_etaSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_rho(prior_rhoSEXP);
    Rcpp::traits::input_parameter< const double >::type prior_nu(prior_nuSEXP);
    rcpp_result_gen = Rcpp::wrap(calibrate_Bayes_chains(a, first, last, ib, bi, nbi, nib, bfirst, blast, bmax, m, sufI, sufI_zero, bkscoretab, b_start, item_fixed, warmup, step, ndraws, progress_init, max_cores, prior_eta, prior_rho, prior_nu));
    return rcpp_result_gen;
END_RCPP
}
// omp_ncores
int omp_ncores();
RcppExport SEXP _dexter_omp_ncores() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(omp_ncores());
    return rcpp_result_gen;
END_RCPP
}
// pv_chain_normal
Rcpp::List pv_chain_normal(const arma::mat& bmat, const arma::ivec& a, const arma::ivec& A, const arma::ivec& first, const arma::ivec& last, const arma::ivec& bk_cnit, const arma::ivec& bk_max_a, const arma::ivec& const_scoretab, const arma::ivec& scoretab_bk, const arma::ivec& scoretab_pop, const arma::ivec& scoretab_nscores, const arma::ivec& scoretab_np, const arma::mat& mu_start, const arma::vec& sigma_start, const int npv, const arma::ivec progress_init, const int max_cores, const int warmup, const int step);
RcppExport SEXP _dexter_pv_chain_normal(SEXP bmatSEXP, SEXP aSEXP, SEXP ASEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP bk_cnitSEXP, SEXP bk_max_aSEXP, SEXP const_scoretabSEXP, SEXP scoretab_bkSEXP, SEXP scoretab_popSEXP, SEXP scoretab_nscoresSEXP, SEXP scoretab_npSEXP, SEXP mu_startSEXP, SEXP sigma_startSEXP, SEXP npvSEXP, SEXP progress_initSEXP, SEXP max_coresSEXP, SEXP warmupSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type bmat(bmatSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bk_cnit(bk_cnitSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bk_max_a(bk_max_aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type const_scoretab(const_scoretabSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab_bk(scoretab_bkSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab_pop(scoretab_popSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab_nscores(scoretab_nscoresSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab_np(scoretab_npSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_start(mu_startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sigma_start(sigma_startSEXP);
    Rcpp::traits::input_parameter< const int >::type npv(npvSEXP);
    Rcpp::traits::input_parameter< const arma::ivec >::type progress_init(progress_initSEXP);
    Rcpp::traits::input_parameter< const int >::type max_cores(max_coresSEXP);
    Rcpp::traits::input_parameter< const int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< const int >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(pv_chain_normal(bmat, a, A, first, last, bk_cnit, bk_max_a, const_scoretab, scoretab_bk, scoretab_pop, scoretab_nscores, scoretab_np, mu_start, sigma_start, npv, progress_init, max_cores, warmup, step));
    return rcpp_result_gen;
END_RCPP
}
// pv_chain_mix
Rcpp::List pv_chain_mix(const arma::mat& bmat, const arma::ivec& a, const arma::ivec& A, const arma::ivec& first, const arma::ivec& last, const arma::ivec& bk_cnit, const arma::ivec& bk_max_a, const arma::ivec& gscoretab, const arma::ivec& gscoretab_bk, const arma::ivec& gscoretab_nscores, const arma::ivec& gscoretab_np, const arma::mat& mu_start, const arma::mat& sigma_start, const arma::vec& p_start, const int npv, const arma::ivec progress_init, const int max_cores, const int warmup, const int step);
RcppExport SEXP _dexter_pv_chain_mix(SEXP bmatSEXP, SEXP aSEXP, SEXP ASEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP bk_cnitSEXP, SEXP bk_max_aSEXP, SEXP gscoretabSEXP, SEXP gscoretab_bkSEXP, SEXP gscoretab_nscoresSEXP, SEXP gscoretab_npSEXP, SEXP mu_startSEXP, SEXP sigma_startSEXP, SEXP p_startSEXP, SEXP npvSEXP, SEXP progress_initSEXP, SEXP max_coresSEXP, SEXP warmupSEXP, SEXP stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type bmat(bmatSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bk_cnit(bk_cnitSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bk_max_a(bk_max_aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type gscoretab(gscoretabSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type gscoretab_bk(gscoretab_bkSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type gscoretab_nscores(gscoretab_nscoresSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type gscoretab_np(gscoretab_npSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_start(mu_startSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_start(sigma_startSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p_start(p_startSEXP);
    Rcpp::traits::input_parameter< const int >::type npv(npvSEXP);
    Rcpp::traits::input_parameter< const arma::ivec >::type progress_init(progress_initSEXP);
    Rcpp::traits::input_parameter< const int >::type max_cores(max_coresSEXP);
    Rcpp::traits::input_parameter< const int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< const int >::type step(stepSEXP);
    rcpp_result_gen = Rcpp::wrap(pv_chain_mix(bmat, a, A, first, last, bk_cnit, bk_max_a, gscoretab, gscoretab_bk, gscoretab_nscores, gscoretab_np, mu_start, sigma_start, p_start, npv, progress_init, max_cores, warmup, step));
    return rcpp_result_gen;
END_RCPP
}
// PV_sve
void PV_sve(const arma::vec& b, const arma::ivec& a, const arma::ivec& bk_first, const arma::ivec& bk_last, const arma::ivec& bcni, const arma::ivec& booklet_id, const arma::ivec& booklet_score, const arma::vec& mu, const double sigma, const int max_cores, arma::mat& pv_mat, const int pv_col_indx, const int niter);
RcppExport SEXP _dexter_PV_sve(SEXP bSEXP, SEXP aSEXP, SEXP bk_firstSEXP, SEXP bk_lastSEXP, SEXP bcniSEXP, SEXP booklet_idSEXP, SEXP booklet_scoreSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP max_coresSEXP, SEXP pv_matSEXP, SEXP pv_col_indxSEXP, SEXP niterSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bk_first(bk_firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bk_last(bk_lastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type bcni(bcniSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type booklet_id(booklet_idSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type booklet_score(booklet_scoreSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const int >::type max_cores(max_coresSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type pv_mat(pv_matSEXP);
    Rcpp::traits::input_parameter< const int >::type pv_col_indx(pv_col_indxSEXP);
    Rcpp::traits::input_parameter< const int >::type niter(niterSEXP);
    PV_sve(b, a, bk_first, bk_last, bcni, booklet_id, booklet_score, mu, sigma, max_cores, pv_mat, pv_col_indx, niter);
    return R_NilValue;
END_RCPP
}
// sampleNRM_testC
arma::ivec sampleNRM_testC(const arma::vec& theta, const arma::vec& b, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last);
RcppExport SEXP _dexter_sampleNRM_testC(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleNRM_testC(theta, b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// sampleNRM_itemC
arma::imat sampleNRM_itemC(const arma::vec& theta, const arma::vec& b, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last);
RcppExport SEXP _dexter_sampleNRM_itemC(SEXP thetaSEXP, SEXP bSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleNRM_itemC(theta, b, a, first, last));
    return rcpp_result_gen;
END_RCPP
}
// sampleIMC
arma::imat sampleIMC(const arma::vec& bIM, const arma::vec& cIM, const arma::ivec& a, const arma::ivec& first, const arma::ivec& last, const arma::ivec& scoretab);
RcppExport SEXP _dexter_sampleIMC(SEXP bIMSEXP, SEXP cIMSEXP, SEXP aSEXP, SEXP firstSEXP, SEXP lastSEXP, SEXP scoretabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type bIM(bIMSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type cIM(cIMSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type first(firstSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type last(lastSEXP);
    Rcpp::traits::input_parameter< const arma::ivec& >::type scoretab(scoretabSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleIMC(bIM, cIM, a, first, last, scoretab));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dexter_Escore_C", (DL_FUNC) &_dexter_Escore_C, 5},
    {"_dexter_theta_mle_sec", (DL_FUNC) &_dexter_theta_mle_sec, 4},
    {"_dexter_escore_wle", (DL_FUNC) &_dexter_escore_wle, 7},
    {"_dexter_theta_wle_sec", (DL_FUNC) &_dexter_theta_wle_sec, 4},
    {"_dexter_theta_EAP_GH_c", (DL_FUNC) &_dexter_theta_EAP_GH_c, 3},
    {"_dexter_IJ_c", (DL_FUNC) &_dexter_IJ_c, 8},
    {"_dexter_fast_factor", (DL_FUNC) &_dexter_fast_factor, 2},
    {"_dexter_fast_factor_lev", (DL_FUNC) &_dexter_fast_factor_lev, 3},
    {"_dexter_fill_resp_matrix", (DL_FUNC) &_dexter_fill_resp_matrix, 4},
    {"_dexter_ds_connected_groups", (DL_FUNC) &_dexter_ds_connected_groups, 1},
    {"_dexter_make_booklets", (DL_FUNC) &_dexter_make_booklets, 6},
    {"_dexter_make_booklets_summed", (DL_FUNC) &_dexter_make_booklets_summed, 5},
    {"_dexter_make_booklets_summed_matrix", (DL_FUNC) &_dexter_make_booklets_summed_matrix, 3},
    {"_dexter_make_booklets_matrix", (DL_FUNC) &_dexter_make_booklets_matrix, 3},
    {"_dexter_mutate_booklet_score", (DL_FUNC) &_dexter_mutate_booklet_score, 3},
    {"_dexter_summarise_booklet_score", (DL_FUNC) &_dexter_summarise_booklet_score, 4},
    {"_dexter_merge_booklets", (DL_FUNC) &_dexter_merge_booklets, 4},
    {"_dexter_get_design_C", (DL_FUNC) &_dexter_get_design_C, 2},
    {"_dexter_polytomize_C", (DL_FUNC) &_dexter_polytomize_C, 7},
    {"_dexter_is_person_booklet_sorted", (DL_FUNC) &_dexter_is_person_booklet_sorted, 3},
    {"_dexter_parms_is_superset_matrix", (DL_FUNC) &_dexter_parms_is_superset_matrix, 5},
    {"_dexter_suf_stats_nrm", (DL_FUNC) &_dexter_suf_stats_nrm, 6},
    {"_dexter_suf_stats_im", (DL_FUNC) &_dexter_suf_stats_im, 5},
    {"_dexter_score_tab_single", (DL_FUNC) &_dexter_score_tab_single, 2},
    {"_dexter_tia_C", (DL_FUNC) &_dexter_tia_C, 9},
    {"_dexter_elsymC", (DL_FUNC) &_dexter_elsymC, 5},
    {"_dexter_list_elsymiC", (DL_FUNC) &_dexter_list_elsymiC, 4},
    {"_dexter_possible_scores_C", (DL_FUNC) &_dexter_possible_scores_C, 3},
    {"_dexter_ittotmatC", (DL_FUNC) &_dexter_ittotmatC, 6},
    {"_dexter_sstable_nrmC", (DL_FUNC) &_dexter_sstable_nrmC, 6},
    {"_dexter_sstable_imC", (DL_FUNC) &_dexter_sstable_imC, 7},
    {"_dexter_elsym_binomC", (DL_FUNC) &_dexter_elsym_binomC, 6},
    {"_dexter_list_elsymi_binomC", (DL_FUNC) &_dexter_list_elsymi_binomC, 5},
    {"_dexter_Expect", (DL_FUNC) &_dexter_Expect, 7},
    {"_dexter_Expect_binom", (DL_FUNC) &_dexter_Expect_binom, 8},
    {"_dexter_Hess", (DL_FUNC) &_dexter_Hess, 10},
    {"_dexter_Hess_binom", (DL_FUNC) &_dexter_Hess_binom, 11},
    {"_dexter_calibrate_Bayes_chains", (DL_FUNC) &_dexter_calibrate_Bayes_chains, 24},
    {"_dexter_omp_ncores", (DL_FUNC) &_dexter_omp_ncores, 0},
    {"_dexter_pv_chain_normal", (DL_FUNC) &_dexter_pv_chain_normal, 19},
    {"_dexter_pv_chain_mix", (DL_FUNC) &_dexter_pv_chain_mix, 19},
    {"_dexter_PV_sve", (DL_FUNC) &_dexter_PV_sve, 13},
    {"_dexter_sampleNRM_testC", (DL_FUNC) &_dexter_sampleNRM_testC, 5},
    {"_dexter_sampleNRM_itemC", (DL_FUNC) &_dexter_sampleNRM_itemC, 5},
    {"_dexter_sampleIMC", (DL_FUNC) &_dexter_sampleIMC, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_dexter(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
